{"name":"csvfilter","body":"================================\r\ncsvfilter - Simple CSV filtering\r\n================================\r\n\r\nA simple wrapper around Python's CSV module to provide a command-line tool for\r\nfiltering columns from a CSV file.  This is useful as standard tools like awk\r\ncan't easily handle the quoting and escaping used in CSV files.  \r\n\r\nBasically, it's a bit like ``cut`` but for CSVs.\r\n\r\nInstall\r\n-------\r\n\r\nFrom PyPi:\r\n\r\n    pip install csvfilter\r\n\r\nUse\r\n---\r\n\r\nPluck fields 1, 3 and 5 from ``in.csv``:\r\n\r\n    csvfilter -f 1,3,5 in.csv > out.csv\r\n\r\nPluck all fields apart from column 2 from STDIN:\r\n\r\n    cat in.csv | csvfilter -f 2 -i > out.csv\r\n\r\nConvert pipe-separated file to comma-separated (by default, output is \r\ncomma-separated):\r\n\r\n    csvfilter -d\"|\" in.psv > out.csv \r\n\r\nSkip that pesky header row:\r\n\r\n    cat in.csv | csvfilter --skip=1\r\n\r\nAs you can see, CSV data can be supplied through STDIN or by running ``csvfilter`` directly on a\r\nfile.\r\n\r\nHelp is in the usual place:\r\n\r\n    $ csvfilter --help\r\n\r\n    Usage: csvfilter [options] [inputfile]\r\n\r\n    Source: https://github.com/codeinthehole/csvfilter/\r\n\r\n    Options:\r\n    -h, --help            show this help message and exit\r\n    -f FIELDS, --fields=FIELDS\r\n                            Specify which fields to pluck\r\n    -s SKIP, --skip=SKIP  Number of rows to skip\r\n    -d DELIMITER, --delimiter=DELIMITER\r\n                            Delimiter of incoming CSV data\r\n    -i, --inverse         Invert the filter - ie drop the selected fields\r\n    --out-delimiter=OUT_DELIMITER\r\n                            Delimiter to use for output\r\n    --out-quotechar=OUT_QUOTECHAR\r\n                            Quote character to use for output\r\n\r\nReport issues\r\n-------------\r\n\r\nUse the [Github issue tracker](https://github.com/codeinthehole/csvfilter/issues) or, better still...\r\n\r\nContribute\r\n----------\r\n\r\nAfter cloning, install the testing requirements:\r\n\r\n    pip install -r requirements.txt\r\n\r\nInstall the package in 'develop' mode to bring the executable onto your path:\r\n\r\n    ./setup.py develop\r\n\r\nRun the tests with:\r\n\r\n    nosetests\r\n\r\nand, if it helps, use the fixture files to test your amendments:\r\n\r\n    cat fixtures/au.csv | csvfilter -f 3,1,2 -s 1\r\n    csvfilter fixutres/au.csv -f 1,2 -i\r\n\r\nHave fun.","tagline":"Command-line tool for manipulating CSV data","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}